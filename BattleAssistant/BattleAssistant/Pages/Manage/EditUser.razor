@page "/EditUser/{UserId}"
@inject IViewModelFactory _viewModelFactory;
@inject IIdentityManager _identityManager;

@if (_editUserViewModel != null)
{
    <div class="row justify-content-center">
        <h2>Edit roles of @_editUserViewModel.UserName</h2>
    </div>
    <div class="row justify-content-start">

        <EditForm Model="_editUserViewModel" OnValidSubmit="HandleValidSubmit">
            <div class="form-check">
                @foreach (var role in _editUserViewModel.UserIsInRole)
                {
                    <input type="checkbox" @bind="role.UserIsInRole" />
                    <label class="form-check-label">@role.RoleName</label>
                }

                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </EditForm>
    </div>


    <div class="@(displaySuccessAlert ? "" : "d-none") alert alert-success alert-dismissible fade show" id="EditUserAlert" role="alert">
        @successAlertMessage
        <button type="button" class="close" aria-label="Close" @onclick="DisableSucessAlert">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

}


@code {
    [Parameter]
    public string UserId { get; set; }
    private EditUserViewModel _editUserViewModel { get; set; }
    private string successAlertMessage { get; set; }
    private bool displaySuccessAlert { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _editUserViewModel = await _viewModelFactory.CreateEditUserViewModel(UserId);
    }

    private async Task HandleValidSubmit()
    {
        await _identityManager.ChangeRolesOfUser(_editUserViewModel.UserName, _editUserViewModel.UserIsInRole);
        successAlertMessage = $"{_editUserViewModel.UserName} edited.";
        displaySuccessAlert = true;
    }

    private void DisableSucessAlert(MouseEventArgs e)
    {
        displaySuccessAlert = false;
    }
}
