@page "/InitSuperAdmin"
@using Microsoft.AspNetCore.Identity;
@using ViewModels;
@inject RoleManager<IdentityRole> _roleManager;
@inject UserManager<IdentityUser> _userManager;
@inject IIdentityManager _identityManager;
<h3>InitSuperAdmin</h3>

@if (!_superAdminExists)
{
    <div class="alert alert-info">
        Super Admin doesn't exist yet, choose a password and click submit to create him.
    </div>
    
    <EditForm EditContext="@_editContext" OnSubmit="HandleSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary />
        @if (_serverSideErrors.Any())
        {
            <ul>
                @foreach (var serverSideErrorMessage in _serverSideErrors)
                {
                    <li>@serverSideErrorMessage</li>
                }
            </ul>
        }
        <div class="form-group">
            <label>First password</label>
            <InputText type="password" class="form-control" id="password" @bind-Value="_initSuperAdminViewModel.Password" />
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}
else{
   <p>Super admin already exists</p>
}


@code {  

    private bool _superAdminExists;
    private InitSuperAdminViewModel _initSuperAdminViewModel = new InitSuperAdminViewModel();
    private List<string> _serverSideErrors = new List<string>();
    private EditContext _editContext;

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(_initSuperAdminViewModel);
        var superAdminUser = await _userManager.FindByNameAsync(Constants.User.SuperAdminEmailAndUserName);
        _superAdminExists = superAdminUser != null;
    }

    private async Task HandleSubmit()
    {
        var viewModelValid = _editContext.Validate();
        if (viewModelValid)
        {
            await CreateSuperAdmin();

        }
    }

    private async Task CreateSuperAdmin()
    {
        var totalErrors = new List<string>();
        var createSuperAdminResult = await CreateSuperAdminUser();
        _serverSideErrors.AddRange(createSuperAdminResult.Errors.Select(e => e.Description));
        _serverSideErrors.AddRange(await CreateSuperAdminRole());
        _serverSideErrors.AddRange(await GiveUserTheRole());
    }

    private async Task<IdentityResult> CreateSuperAdminUser()
    {
        var errors = new List<string>();
        if(await _userManager.FindByNameAsync(Constants.User.SuperAdminEmailAndUserName) == null)
        {
            var superAdminUser = new IdentityUser(Constants.User.SuperAdminEmailAndUserName);
            superAdminUser.Email = Constants.User.SuperAdminEmailAndUserName;
            var viewmodel = (InitSuperAdminViewModel)_editContext.Model;
            return await _identityManager.AddUserAsync(superAdminUser, viewmodel.Password);
        }
        return new IdentityResult();
    }

    private async Task<List<string>> CreateSuperAdminRole()
    {
        var errors = new List<string>();
        if (!await _roleManager.RoleExistsAsync(Constants.Role.SuperAdmin))
        {
            var superAdminRole = new IdentityRole(Constants.Role.SuperAdmin);
            var createSuperAdminRoleResult = await _roleManager.CreateAsync(superAdminRole);
            if (!createSuperAdminRoleResult.Succeeded)
            {
                errors.AddRange(createSuperAdminRoleResult.Errors.Select(e => e.Description));
            }
        }

        return errors;
    }

    private async Task<List<string>> GiveUserTheRole()
    {
        var errors = new List<string>();
        var superAdminUsers = await _userManager.GetUsersInRoleAsync(Constants.Role.SuperAdmin);
        if (!superAdminUsers.Any(u => u.NormalizedUserName == Constants.User.SuperAdminEmailAndUserName.ToUpper()))
        {
            var superAdmin = await _userManager.FindByNameAsync(Constants.User.SuperAdminEmailAndUserName);
            if(superAdmin != null)
            {
                var giveSuperAdminHisRoleResult = await _userManager.AddToRoleAsync(superAdmin, Constants.Role.SuperAdmin);
                if (!giveSuperAdminHisRoleResult.Succeeded)
                {
                    errors.AddRange(giveSuperAdminHisRoleResult.Errors.Select(e => e.Description));
                }
            }
        }

        return errors;
    }
}
